// Prisma schema matching Core Data entities
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User entity (Patient)
model User {
  id                  String   @id @default(uuid())
  name                String?
  email               String   @unique
  password            String
  skinType            String?
  currentSkinScore    Int      @default(0)
  streakCount         Int      @default(0)
  onboardingCompleted Boolean  @default(false)
  allergies           String?
  currentMedications  String?
  skinConcerns        String?
  joinDate            DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  assignedDermatologist Dermatologist? @relation(fields: [dermatologistId], references: [id])
  dermatologistId       String?
  appointments          Appointment[]
  prescriptions         Prescription[]
  messages              Message[]
  subscriptions         Subscription[]
  skinPhotos            SkinPhoto[]

  @@map("users")
}

// Dermatologist entity
model Dermatologist {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  password        String
  title           String?
  specialization  String?
  profileImageUrl String?
  phone           String?
  isAvailable     Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  patients      User[]
  appointments  Appointment[]
  prescriptions Prescription[]
  sentMessages  Message[]      @relation("DermatologistMessages")

  @@map("dermatologists")
}

// Appointment entity
model Appointment {
  id            String   @id @default(uuid())
  scheduledDate DateTime
  duration      Int      @default(30)
  type          String
  status        String   @default("scheduled")
  concern       String?
  notes         String?
  visitNotes    String?
  videoCallURL  String?
  createdDate   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  patient         User          @relation(fields: [patientId], references: [id])
  patientId       String
  dermatologist   Dermatologist @relation(fields: [dermatologistId], references: [id])
  dermatologistId String
  relatedPhotos   SkinPhoto[]

  @@map("appointments")
}

// Prescription entity
model Prescription {
  id               String    @id @default(uuid())
  medicationName   String
  dosage           String
  instructions     String
  prescribedDate   DateTime  @default(now())
  expiryDate       DateTime?
  refillsRemaining Int       @default(0)
  isActive         Boolean   @default(true)
  pharmacy         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relationships
  patient         User          @relation(fields: [patientId], references: [id])
  patientId       String
  prescribedBy    Dermatologist @relation(fields: [dermatologistId], references: [id])
  dermatologistId String
  relatedProduct  Product?      @relation(fields: [productId], references: [id])
  productId       String?

  @@map("prescriptions")
}

// Message entity
model Message {
  id             String   @id @default(uuid())
  content        String
  sentDate       DateTime @default(now())
  isRead         Boolean  @default(false)
  messageType    String   @default("text")
  attachmentUrl  String?
  attachmentType String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  sender      User          @relation(fields: [senderId], references: [id])
  senderId    String
  recipient   Dermatologist @relation("DermatologistMessages", fields: [recipientId], references: [id])
  recipientId String

  @@map("messages")
}

// Product entity
model Product {
  id                     String   @id @default(uuid())
  name                   String
  brand                  String?
  category               String
  price                  Decimal
  productDescription     String?
  ingredients            String?
  imageUrl               String?
  isAvailable            Boolean  @default(true)
  isPrescriptionRequired Boolean  @default(false)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relationships
  subscriptions Subscription[]
  prescriptions Prescription[]

  @@map("products")
}

// Subscription entity
model Subscription {
  id               String   @id @default(uuid())
  startDate        DateTime @default(now())
  nextDeliveryDate DateTime
  frequency        String
  quantity         Int      @default(1)
  status           String   @default("active")
  totalPrice       Decimal
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@map("subscriptions")
}

// SkinPhoto entity
model SkinPhoto {
  id          String   @id @default(uuid())
  photoUrl    String
  skinScore   Int      @default(0)
  notes       String?
  captureDate DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user               User         @relation(fields: [userId], references: [id])
  userId             String
  relatedAppointment Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId      String?

  @@map("skin_photos")
}

// Routine entities
model Routine {
  id             String   @id @default(uuid())
  name           String
  timeOfDay      String
  isActive       Boolean  @default(true)
  completedToday Boolean  @default(false)
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relationships
  steps RoutineStep[]

  @@map("routines")
}

model RoutineStep {
  id           String   @id @default(uuid())
  productName  String
  productType  String?
  instructions String?
  duration     Int      @default(0)
  orderIndex   Int      @default(0)
  isCompleted  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  routine   Routine @relation(fields: [routineId], references: [id])
  routineId String

  @@map("routine_steps")
}

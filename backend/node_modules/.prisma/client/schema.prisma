generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String         @id @default(uuid())
  name                  String?
  email                 String         @unique
  password              String
  skinType              String?
  currentSkinScore      Int            @default(0)
  streakCount           Int            @default(0)
  onboardingCompleted   Boolean        @default(false)
  allergies             String?
  currentMedications    String?
  skinConcerns          String?
  joinDate              DateTime       @default(now())
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  dermatologistId       String?
  appointments          Appointment[]
  prescriptions         Prescription[]
  skinPhotos            SkinPhoto[]
  subscriptions         Subscription[]
  assignedDermatologist Dermatologist? @relation(fields: [dermatologistId], references: [id])

  @@map("users")
}

model Dermatologist {
  id              String         @id @default(uuid())
  name            String
  email           String         @unique
  password        String
  title           String?
  specialization  String?
  profileImageUrl String?
  phone           String?
  isAvailable     Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  appointments    Appointment[]
  prescriptions   Prescription[]
  patients        User[]

  @@map("dermatologists")
}

model Appointment {
  id              String        @id @default(uuid())
  scheduledDate   DateTime
  duration        Int           @default(30)
  type            String
  status          String        @default("scheduled")
  concern         String?
  notes           String?
  visitNotes      String?
  videoCallURL    String?
  createdDate     DateTime      @default(now())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  patientId       String
  dermatologistId String
  dermatologist   Dermatologist @relation(fields: [dermatologistId], references: [id])
  patient         User          @relation(fields: [patientId], references: [id])
  relatedPhotos   SkinPhoto[]

  @@map("appointments")
}

model Prescription {
  id               String        @id @default(uuid())
  medicationName   String
  dosage           String
  instructions     String
  prescribedDate   DateTime      @default(now())
  expiryDate       DateTime?
  refillsRemaining Int           @default(0)
  isActive         Boolean       @default(true)
  pharmacy         String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  patientId        String
  dermatologistId  String
  productId        String?
  prescribedBy     Dermatologist @relation(fields: [dermatologistId], references: [id])
  patient          User          @relation(fields: [patientId], references: [id])
  relatedProduct   Product?      @relation(fields: [productId], references: [id])

  @@map("prescriptions")
}

model Message {
  id             String   @id @default(uuid())
  content        String
  sentDate       DateTime @default(now())
  isRead         Boolean  @default(false)
  messageType    String   @default("text")
  attachmentUrl  String?
  attachmentType String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  senderId       String
  senderType     String // 'patient' or 'dermatologist'
  recipientId    String
  recipientType  String // 'patient' or 'dermatologist'

  @@map("messages")
}

model Product {
  id                     String         @id @default(uuid())
  name                   String
  brand                  String?
  category               String
  price                  Decimal
  productDescription     String?
  ingredients            String?
  imageUrl               String?
  isAvailable            Boolean        @default(true)
  isPrescriptionRequired Boolean        @default(false)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  prescriptions          Prescription[]
  subscriptions          Subscription[]

  @@map("products")
}

model Subscription {
  id               String   @id @default(uuid())
  startDate        DateTime @default(now())
  nextDeliveryDate DateTime
  frequency        String
  quantity         Int      @default(1)
  status           String   @default("active")
  totalPrice       Decimal
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  userId           String
  productId        String
  product          Product  @relation(fields: [productId], references: [id])
  user             User     @relation(fields: [userId], references: [id])

  @@map("subscriptions")
}

model SkinPhoto {
  id                 String       @id @default(uuid())
  photoUrl           String
  skinScore          Int          @default(0)
  notes              String?
  captureDate        DateTime     @default(now())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  userId             String
  appointmentId      String?
  relatedAppointment Appointment? @relation(fields: [appointmentId], references: [id])
  user               User         @relation(fields: [userId], references: [id])

  @@map("skin_photos")
}

model Routine {
  id             String        @id @default(uuid())
  name           String
  timeOfDay      String
  isActive       Boolean       @default(true)
  completedToday Boolean       @default(false)
  userId         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  steps          RoutineStep[]

  @@map("routines")
}

model RoutineStep {
  id           String   @id @default(uuid())
  productName  String
  productType  String?
  instructions String?
  duration     Int      @default(0)
  orderIndex   Int      @default(0)
  isCompleted  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  routineId    String
  routine      Routine  @relation(fields: [routineId], references: [id])

  @@map("routine_steps")
}
